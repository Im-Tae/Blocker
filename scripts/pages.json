[{"name":"class Blocker","description":"com.leaf.blocker.Blocker","location":"blocker/com.leaf.blocker/-blocker/index.html","searchKeys":["Blocker","class Blocker","com.leaf.blocker.Blocker"]},{"name":"constructor()","description":"com.leaf.blocker.Blocker.Blocker","location":"blocker/com.leaf.blocker/-blocker/-blocker.html","searchKeys":["Blocker","constructor()","com.leaf.blocker.Blocker.Blocker"]},{"name":"fun <T, G> debounce(waitInterval: Long = 2000, coroutineScope: CoroutineScope, callback: (T, G) -> Unit): (T, G) -> Unit","description":"com.leaf.blocker.extend.debounce","location":"blocker/com.leaf.blocker.extend/debounce.html","searchKeys":["debounce","fun <T, G> debounce(waitInterval: Long = 2000, coroutineScope: CoroutineScope, callback: (T, G) -> Unit): (T, G) -> Unit","com.leaf.blocker.extend.debounce"]},{"name":"fun <T, G> throttleFirst(skipInterval: Long, coroutineScope: CoroutineScope, callback: (T, G) -> Unit): (T, G) -> Unit","description":"com.leaf.blocker.extend.throttleFirst","location":"blocker/com.leaf.blocker.extend/throttle-first.html","searchKeys":["throttleFirst","fun <T, G> throttleFirst(skipInterval: Long, coroutineScope: CoroutineScope, callback: (T, G) -> Unit): (T, G) -> Unit","com.leaf.blocker.extend.throttleFirst"]},{"name":"fun <T, G> throttleLatest(skipInterval: Long, coroutineScope: CoroutineScope, callback: (T, G) -> Unit): (T, G) -> Unit","description":"com.leaf.blocker.extend.throttleLatest","location":"blocker/com.leaf.blocker.extend/throttle-latest.html","searchKeys":["throttleLatest","fun <T, G> throttleLatest(skipInterval: Long, coroutineScope: CoroutineScope, callback: (T, G) -> Unit): (T, G) -> Unit","com.leaf.blocker.extend.throttleLatest"]},{"name":"fun <T> debounce(waitInterval: Long = 2000, coroutineScope: CoroutineScope, callback: (T) -> Unit): (T) -> Unit","description":"com.leaf.blocker.extend.debounce","location":"blocker/com.leaf.blocker.extend/debounce.html","searchKeys":["debounce","fun <T> debounce(waitInterval: Long = 2000, coroutineScope: CoroutineScope, callback: (T) -> Unit): (T) -> Unit","com.leaf.blocker.extend.debounce"]},{"name":"fun <T> throttleFirst(skipInterval: Long, coroutineScope: CoroutineScope, callback: (T) -> Unit): (T) -> Unit","description":"com.leaf.blocker.extend.throttleFirst","location":"blocker/com.leaf.blocker.extend/throttle-first.html","searchKeys":["throttleFirst","fun <T> throttleFirst(skipInterval: Long, coroutineScope: CoroutineScope, callback: (T) -> Unit): (T) -> Unit","com.leaf.blocker.extend.throttleFirst"]},{"name":"fun <T> throttleLatest(skipInterval: Long, coroutineScope: CoroutineScope, callback: (T) -> Unit): (T) -> Unit","description":"com.leaf.blocker.extend.throttleLatest","location":"blocker/com.leaf.blocker.extend/throttle-latest.html","searchKeys":["throttleLatest","fun <T> throttleLatest(skipInterval: Long, coroutineScope: CoroutineScope, callback: (T) -> Unit): (T) -> Unit","com.leaf.blocker.extend.throttleLatest"]},{"name":"fun DebounceButton(onClick: () -> Unit, modifier: Modifier = Modifier, waitInterval: Long = Blocker.getInterval(), enabled: Boolean = true, interactionSource: MutableInteractionSource = remember { MutableInteractionSource() }, elevation: ButtonElevation? = ButtonDefaults.buttonElevation(), shape: Shape = MaterialTheme.shapes.small, border: BorderStroke? = null, colors: ButtonColors = ButtonDefaults.buttonColors(), contentPadding: PaddingValues = ButtonDefaults.ContentPadding, content: RowScope.() -> Unit)","description":"com.leaf.blocker.compose.material3.DebounceButton","location":"blocker/com.leaf.blocker.compose.material3/-debounce-button.html","searchKeys":["DebounceButton","fun DebounceButton(onClick: () -> Unit, modifier: Modifier = Modifier, waitInterval: Long = Blocker.getInterval(), enabled: Boolean = true, interactionSource: MutableInteractionSource = remember { MutableInteractionSource() }, elevation: ButtonElevation? = ButtonDefaults.buttonElevation(), shape: Shape = MaterialTheme.shapes.small, border: BorderStroke? = null, colors: ButtonColors = ButtonDefaults.buttonColors(), contentPadding: PaddingValues = ButtonDefaults.ContentPadding, content: RowScope.() -> Unit)","com.leaf.blocker.compose.material3.DebounceButton"]},{"name":"fun DebounceButton(onClick: () -> Unit, modifier: Modifier = Modifier, waitInterval: Long = Blocker.getInterval(), enabled: Boolean = true, interactionSource: MutableInteractionSource = remember { MutableInteractionSource() }, elevation: ButtonElevation? = ButtonDefaults.elevation(), shape: Shape = MaterialTheme.shapes.small, border: BorderStroke? = null, colors: ButtonColors = ButtonDefaults.buttonColors(), contentPadding: PaddingValues = ButtonDefaults.ContentPadding, content: RowScope.() -> Unit)","description":"com.leaf.blocker.compose.material.DebounceButton","location":"blocker/com.leaf.blocker.compose.material/-debounce-button.html","searchKeys":["DebounceButton","fun DebounceButton(onClick: () -> Unit, modifier: Modifier = Modifier, waitInterval: Long = Blocker.getInterval(), enabled: Boolean = true, interactionSource: MutableInteractionSource = remember { MutableInteractionSource() }, elevation: ButtonElevation? = ButtonDefaults.elevation(), shape: Shape = MaterialTheme.shapes.small, border: BorderStroke? = null, colors: ButtonColors = ButtonDefaults.buttonColors(), contentPadding: PaddingValues = ButtonDefaults.ContentPadding, content: RowScope.() -> Unit)","com.leaf.blocker.compose.material.DebounceButton"]},{"name":"fun DebounceCheckBox(checked: Boolean, onCheckedChange: (Boolean) -> Unit?, modifier: Modifier = Modifier, waitInterval: Long = Blocker.getInterval(), enabled: Boolean = true, interactionSource: MutableInteractionSource = remember { MutableInteractionSource() }, colors: CheckboxColors = CheckboxDefaults.colors())","description":"com.leaf.blocker.compose.material.DebounceCheckBox","location":"blocker/com.leaf.blocker.compose.material/-debounce-check-box.html","searchKeys":["DebounceCheckBox","fun DebounceCheckBox(checked: Boolean, onCheckedChange: (Boolean) -> Unit?, modifier: Modifier = Modifier, waitInterval: Long = Blocker.getInterval(), enabled: Boolean = true, interactionSource: MutableInteractionSource = remember { MutableInteractionSource() }, colors: CheckboxColors = CheckboxDefaults.colors())","com.leaf.blocker.compose.material.DebounceCheckBox"]},{"name":"fun DebounceCheckBox(checked: Boolean, onCheckedChange: (Boolean) -> Unit?, modifier: Modifier = Modifier, waitInterval: Long = Blocker.getInterval(), enabled: Boolean = true, interactionSource: MutableInteractionSource = remember { MutableInteractionSource() }, colors: CheckboxColors = CheckboxDefaults.colors())","description":"com.leaf.blocker.compose.material3.DebounceCheckBox","location":"blocker/com.leaf.blocker.compose.material3/-debounce-check-box.html","searchKeys":["DebounceCheckBox","fun DebounceCheckBox(checked: Boolean, onCheckedChange: (Boolean) -> Unit?, modifier: Modifier = Modifier, waitInterval: Long = Blocker.getInterval(), enabled: Boolean = true, interactionSource: MutableInteractionSource = remember { MutableInteractionSource() }, colors: CheckboxColors = CheckboxDefaults.colors())","com.leaf.blocker.compose.material3.DebounceCheckBox"]},{"name":"fun DebounceRadioButton(selected: Boolean, onClick: () -> Unit?, modifier: Modifier = Modifier, waitInterval: Long = Blocker.getInterval(), enabled: Boolean = true, interactionSource: MutableInteractionSource = remember { MutableInteractionSource() }, colors: RadioButtonColors = RadioButtonDefaults.colors())","description":"com.leaf.blocker.compose.material.DebounceRadioButton","location":"blocker/com.leaf.blocker.compose.material/-debounce-radio-button.html","searchKeys":["DebounceRadioButton","fun DebounceRadioButton(selected: Boolean, onClick: () -> Unit?, modifier: Modifier = Modifier, waitInterval: Long = Blocker.getInterval(), enabled: Boolean = true, interactionSource: MutableInteractionSource = remember { MutableInteractionSource() }, colors: RadioButtonColors = RadioButtonDefaults.colors())","com.leaf.blocker.compose.material.DebounceRadioButton"]},{"name":"fun DebounceRadioButton(selected: Boolean, onClick: () -> Unit?, modifier: Modifier = Modifier, waitInterval: Long = Blocker.getInterval(), enabled: Boolean = true, interactionSource: MutableInteractionSource = remember { MutableInteractionSource() }, colors: RadioButtonColors = RadioButtonDefaults.colors())","description":"com.leaf.blocker.compose.material3.DebounceRadioButton","location":"blocker/com.leaf.blocker.compose.material3/-debounce-radio-button.html","searchKeys":["DebounceRadioButton","fun DebounceRadioButton(selected: Boolean, onClick: () -> Unit?, modifier: Modifier = Modifier, waitInterval: Long = Blocker.getInterval(), enabled: Boolean = true, interactionSource: MutableInteractionSource = remember { MutableInteractionSource() }, colors: RadioButtonColors = RadioButtonDefaults.colors())","com.leaf.blocker.compose.material3.DebounceRadioButton"]},{"name":"fun ThrottleButton(onClick: () -> Unit, modifier: Modifier = Modifier, skipInterval: Long = Blocker.getInterval(), enabled: Boolean = true, interactionSource: MutableInteractionSource = remember { MutableInteractionSource() }, elevation: ButtonElevation? = ButtonDefaults.buttonElevation(), shape: Shape = MaterialTheme.shapes.small, border: BorderStroke? = null, colors: ButtonColors = ButtonDefaults.buttonColors(), contentPadding: PaddingValues = ButtonDefaults.ContentPadding, content: RowScope.() -> Unit)","description":"com.leaf.blocker.compose.material3.ThrottleButton","location":"blocker/com.leaf.blocker.compose.material3/-throttle-button.html","searchKeys":["ThrottleButton","fun ThrottleButton(onClick: () -> Unit, modifier: Modifier = Modifier, skipInterval: Long = Blocker.getInterval(), enabled: Boolean = true, interactionSource: MutableInteractionSource = remember { MutableInteractionSource() }, elevation: ButtonElevation? = ButtonDefaults.buttonElevation(), shape: Shape = MaterialTheme.shapes.small, border: BorderStroke? = null, colors: ButtonColors = ButtonDefaults.buttonColors(), contentPadding: PaddingValues = ButtonDefaults.ContentPadding, content: RowScope.() -> Unit)","com.leaf.blocker.compose.material3.ThrottleButton"]},{"name":"fun ThrottleButton(onClick: () -> Unit, modifier: Modifier = Modifier, skipInterval: Long = Blocker.getInterval(), enabled: Boolean = true, interactionSource: MutableInteractionSource = remember { MutableInteractionSource() }, elevation: ButtonElevation? = ButtonDefaults.elevation(), shape: Shape = MaterialTheme.shapes.small, border: BorderStroke? = null, colors: ButtonColors = ButtonDefaults.buttonColors(), contentPadding: PaddingValues = ButtonDefaults.ContentPadding, content: RowScope.() -> Unit)","description":"com.leaf.blocker.compose.material.ThrottleButton","location":"blocker/com.leaf.blocker.compose.material/-throttle-button.html","searchKeys":["ThrottleButton","fun ThrottleButton(onClick: () -> Unit, modifier: Modifier = Modifier, skipInterval: Long = Blocker.getInterval(), enabled: Boolean = true, interactionSource: MutableInteractionSource = remember { MutableInteractionSource() }, elevation: ButtonElevation? = ButtonDefaults.elevation(), shape: Shape = MaterialTheme.shapes.small, border: BorderStroke? = null, colors: ButtonColors = ButtonDefaults.buttonColors(), contentPadding: PaddingValues = ButtonDefaults.ContentPadding, content: RowScope.() -> Unit)","com.leaf.blocker.compose.material.ThrottleButton"]},{"name":"fun ThrottleCheckBox(checked: Boolean, onCheckedChange: (Boolean) -> Unit?, modifier: Modifier = Modifier, skipInterval: Long = Blocker.getInterval(), enabled: Boolean = true, interactionSource: MutableInteractionSource = remember { MutableInteractionSource() }, colors: CheckboxColors = CheckboxDefaults.colors())","description":"com.leaf.blocker.compose.material.ThrottleCheckBox","location":"blocker/com.leaf.blocker.compose.material/-throttle-check-box.html","searchKeys":["ThrottleCheckBox","fun ThrottleCheckBox(checked: Boolean, onCheckedChange: (Boolean) -> Unit?, modifier: Modifier = Modifier, skipInterval: Long = Blocker.getInterval(), enabled: Boolean = true, interactionSource: MutableInteractionSource = remember { MutableInteractionSource() }, colors: CheckboxColors = CheckboxDefaults.colors())","com.leaf.blocker.compose.material.ThrottleCheckBox"]},{"name":"fun ThrottleCheckBox(checked: Boolean, onCheckedChange: (Boolean) -> Unit?, modifier: Modifier = Modifier, skipInterval: Long = Blocker.getInterval(), enabled: Boolean = true, interactionSource: MutableInteractionSource = remember { MutableInteractionSource() }, colors: CheckboxColors = CheckboxDefaults.colors())","description":"com.leaf.blocker.compose.material3.ThrottleCheckBox","location":"blocker/com.leaf.blocker.compose.material3/-throttle-check-box.html","searchKeys":["ThrottleCheckBox","fun ThrottleCheckBox(checked: Boolean, onCheckedChange: (Boolean) -> Unit?, modifier: Modifier = Modifier, skipInterval: Long = Blocker.getInterval(), enabled: Boolean = true, interactionSource: MutableInteractionSource = remember { MutableInteractionSource() }, colors: CheckboxColors = CheckboxDefaults.colors())","com.leaf.blocker.compose.material3.ThrottleCheckBox"]},{"name":"fun ThrottleRadioButton(selected: Boolean, onClick: () -> Unit?, modifier: Modifier = Modifier, skipInterval: Long = Blocker.getInterval(), enabled: Boolean = true, interactionSource: MutableInteractionSource = remember { MutableInteractionSource() }, colors: RadioButtonColors = RadioButtonDefaults.colors())","description":"com.leaf.blocker.compose.material.ThrottleRadioButton","location":"blocker/com.leaf.blocker.compose.material/-throttle-radio-button.html","searchKeys":["ThrottleRadioButton","fun ThrottleRadioButton(selected: Boolean, onClick: () -> Unit?, modifier: Modifier = Modifier, skipInterval: Long = Blocker.getInterval(), enabled: Boolean = true, interactionSource: MutableInteractionSource = remember { MutableInteractionSource() }, colors: RadioButtonColors = RadioButtonDefaults.colors())","com.leaf.blocker.compose.material.ThrottleRadioButton"]},{"name":"fun ThrottleRadioButton(selected: Boolean, onClick: () -> Unit?, modifier: Modifier = Modifier, skipInterval: Long = Blocker.getInterval(), enabled: Boolean = true, interactionSource: MutableInteractionSource = remember { MutableInteractionSource() }, colors: RadioButtonColors = RadioButtonDefaults.colors())","description":"com.leaf.blocker.compose.material3.ThrottleRadioButton","location":"blocker/com.leaf.blocker.compose.material3/-throttle-radio-button.html","searchKeys":["ThrottleRadioButton","fun ThrottleRadioButton(selected: Boolean, onClick: () -> Unit?, modifier: Modifier = Modifier, skipInterval: Long = Blocker.getInterval(), enabled: Boolean = true, interactionSource: MutableInteractionSource = remember { MutableInteractionSource() }, colors: RadioButtonColors = RadioButtonDefaults.colors())","com.leaf.blocker.compose.material3.ThrottleRadioButton"]},{"name":"fun View.onDebounceClick(listener: View.OnClickListener, waitInterval: Long?)","description":"com.leaf.blocker.binding.onDebounceClick","location":"blocker/com.leaf.blocker.binding/on-debounce-click.html","searchKeys":["onDebounceClick","fun View.onDebounceClick(listener: View.OnClickListener, waitInterval: Long?)","com.leaf.blocker.binding.onDebounceClick"]},{"name":"fun View.onThrottleFirstClick(listener: View.OnClickListener, skipInterval: Long?)","description":"com.leaf.blocker.binding.onThrottleFirstClick","location":"blocker/com.leaf.blocker.binding/on-throttle-first-click.html","searchKeys":["onThrottleFirstClick","fun View.onThrottleFirstClick(listener: View.OnClickListener, skipInterval: Long?)","com.leaf.blocker.binding.onThrottleFirstClick"]},{"name":"fun View.onThrottleLastClick(listener: View.OnClickListener, skipInterval: Long?)","description":"com.leaf.blocker.binding.onThrottleLastClick","location":"blocker/com.leaf.blocker.binding/on-throttle-last-click.html","searchKeys":["onThrottleLastClick","fun View.onThrottleLastClick(listener: View.OnClickListener, skipInterval: Long?)","com.leaf.blocker.binding.onThrottleLastClick"]},{"name":"fun View.setOnDebounceClickListener(lifecycle: Lifecycle, waitInterval: Long = Blocker.getInterval(), listener: View.OnClickListener?)","description":"com.leaf.blocker.view.setOnDebounceClickListener","location":"blocker/com.leaf.blocker.view/set-on-debounce-click-listener.html","searchKeys":["setOnDebounceClickListener","fun View.setOnDebounceClickListener(lifecycle: Lifecycle, waitInterval: Long = Blocker.getInterval(), listener: View.OnClickListener?)","com.leaf.blocker.view.setOnDebounceClickListener"]},{"name":"fun View.setOnThrottleFirstListener(lifecycle: Lifecycle, skipInterval: Long = Blocker.getInterval(), listener: View.OnClickListener?)","description":"com.leaf.blocker.view.setOnThrottleFirstListener","location":"blocker/com.leaf.blocker.view/set-on-throttle-first-listener.html","searchKeys":["setOnThrottleFirstListener","fun View.setOnThrottleFirstListener(lifecycle: Lifecycle, skipInterval: Long = Blocker.getInterval(), listener: View.OnClickListener?)","com.leaf.blocker.view.setOnThrottleFirstListener"]},{"name":"fun View.setOnThrottleLastListener(lifecycle: Lifecycle, skipInterval: Long = Blocker.getInterval(), listener: View.OnClickListener?)","description":"com.leaf.blocker.view.setOnThrottleLastListener","location":"blocker/com.leaf.blocker.view/set-on-throttle-last-listener.html","searchKeys":["setOnThrottleLastListener","fun View.setOnThrottleLastListener(lifecycle: Lifecycle, skipInterval: Long = Blocker.getInterval(), listener: View.OnClickListener?)","com.leaf.blocker.view.setOnThrottleLastListener"]},{"name":"fun debounce(waitInterval: Long = 2000, coroutineScope: CoroutineScope, callback: () -> Unit): () -> Unit","description":"com.leaf.blocker.extend.debounce","location":"blocker/com.leaf.blocker.extend/debounce.html","searchKeys":["debounce","fun debounce(waitInterval: Long = 2000, coroutineScope: CoroutineScope, callback: () -> Unit): () -> Unit","com.leaf.blocker.extend.debounce"]},{"name":"fun getInterval(): Long","description":"com.leaf.blocker.Blocker.Companion.getInterval","location":"blocker/com.leaf.blocker/-blocker/-companion/get-interval.html","searchKeys":["getInterval","fun getInterval(): Long","com.leaf.blocker.Blocker.Companion.getInterval"]},{"name":"fun setInterval(interval: Long)","description":"com.leaf.blocker.Blocker.Companion.setInterval","location":"blocker/com.leaf.blocker/-blocker/-companion/set-interval.html","searchKeys":["setInterval","fun setInterval(interval: Long)","com.leaf.blocker.Blocker.Companion.setInterval"]},{"name":"fun throttleFirst(skipInterval: Long, coroutineScope: CoroutineScope, callback: () -> Unit): () -> Unit","description":"com.leaf.blocker.extend.throttleFirst","location":"blocker/com.leaf.blocker.extend/throttle-first.html","searchKeys":["throttleFirst","fun throttleFirst(skipInterval: Long, coroutineScope: CoroutineScope, callback: () -> Unit): () -> Unit","com.leaf.blocker.extend.throttleFirst"]},{"name":"object Companion","description":"com.leaf.blocker.Blocker.Companion","location":"blocker/com.leaf.blocker/-blocker/-companion/index.html","searchKeys":["Companion","object Companion","com.leaf.blocker.Blocker.Companion"]}]
